{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Welcome to the Csound 7 Manual! This manual ...","title":"Home"},{"location":"#welcome-to-the-csound-7-manual","text":"This manual ...","title":"Welcome to the Csound 7 Manual!"},{"location":"intro-copyright-notice/","text":"Copyright Notice This version of the Csound Manual (\"The Canonical Csound Manual\") is released under the GNU Free Documentation Licence. Below are listed, for historical purposes, previous copyrights and requests for credit from previous authors. Previous copyright notices Copyright (c) 1986, 1992 by the Massachusetts Institute of Technology. All rights reserved. Developed by Barry L. Vercoe at the Experimental Music Studio, Media Laboratory, M.I.T., Cambridge, Massachusetts, with partial support from the System Development Foundation and from National Science Foundation Grant # IRI-8704665. Manual Copyright (c) 2003 by Kevin Conder for modifications made to the Public Csound Reference Manual. Permission is granted to copy, distribute and/or modify this document under the terms of the GNU Free Documentation License, Version 1.2 or any later version published by the Free Software Foundation; with no Invariant Sections, no Front-Cover Texts, and no Back-Cover Texts. A copy of this license is available in the examples sub-directory or at: www.gnu.org/licenses/fdl.txt. This Csound language documentation in this manual is derived from Kevin Conder's Alternative Csound Reference Manual, which in turn is derived from the Public Csound Reference Manual. Copyright 2004-2005 by Michael Gogins for modifications made to the Alternative Csound Reference Manual. This legal notice is from the Public Csound Reference Manual: \u201cThe original Hypertext Edition of the MIT Csound Manual was prepared for the World Wide Web by Peter J. Nix of the Department of Music at the University of Leeds and Jean Pich\u00e9 of the Facult\u00e9 de musique de l'Universit\u00e9 de Montr\u00e9al. A Print Edition, in Adobe Acrobat format, was then maintained by David M. Boothe. The editors fully acknowledge the rights of the authors of the original documentation and programs, as set out above, and further request that this notice appear wherever this material is held.\u201d The Public Csound Reference Manual's last known network location was http://www.lakewoodsound.com/csound/hypertext/manual.htm. The Alternative Csound Reference Manual's network location, for both the Transparent and Opaque copies, is http://kevindumpscore.com/download.html#csound-manual. Csound is copyright 1991-2008 by Barry Vercoe, John ffitch and others. Csound is free software; you can redistribute them and/or modify them under the terms of the GNU Lesser General Public License as published by the Free Software Foundation; either version 2.1 of the License, or (at your option) any later version. Csound is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more details. You should have received a copy of the GNU Lesser General Public License along with Csound and CsoundAC; if not, write to the Free Software Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.","title":"Copyright Notice"},{"location":"intro-copyright-notice/#copyright-notice","text":"This version of the Csound Manual (\"The Canonical Csound Manual\") is released under the GNU Free Documentation Licence. Below are listed, for historical purposes, previous copyrights and requests for credit from previous authors. Previous copyright notices Copyright (c) 1986, 1992 by the Massachusetts Institute of Technology. All rights reserved. Developed by Barry L. Vercoe at the Experimental Music Studio, Media Laboratory, M.I.T., Cambridge, Massachusetts, with partial support from the System Development Foundation and from National Science Foundation Grant # IRI-8704665. Manual Copyright (c) 2003 by Kevin Conder for modifications made to the Public Csound Reference Manual. Permission is granted to copy, distribute and/or modify this document under the terms of the GNU Free Documentation License, Version 1.2 or any later version published by the Free Software Foundation; with no Invariant Sections, no Front-Cover Texts, and no Back-Cover Texts. A copy of this license is available in the examples sub-directory or at: www.gnu.org/licenses/fdl.txt. This Csound language documentation in this manual is derived from Kevin Conder's Alternative Csound Reference Manual, which in turn is derived from the Public Csound Reference Manual. Copyright 2004-2005 by Michael Gogins for modifications made to the Alternative Csound Reference Manual. This legal notice is from the Public Csound Reference Manual: \u201cThe original Hypertext Edition of the MIT Csound Manual was prepared for the World Wide Web by Peter J. Nix of the Department of Music at the University of Leeds and Jean Pich\u00e9 of the Facult\u00e9 de musique de l'Universit\u00e9 de Montr\u00e9al. A Print Edition, in Adobe Acrobat format, was then maintained by David M. Boothe. The editors fully acknowledge the rights of the authors of the original documentation and programs, as set out above, and further request that this notice appear wherever this material is held.\u201d The Public Csound Reference Manual's last known network location was http://www.lakewoodsound.com/csound/hypertext/manual.htm. The Alternative Csound Reference Manual's network location, for both the Transparent and Opaque copies, is http://kevindumpscore.com/download.html#csound-manual. Csound is copyright 1991-2008 by Barry Vercoe, John ffitch and others. Csound is free software; you can redistribute them and/or modify them under the terms of the GNU Lesser General Public License as published by the Free Software Foundation; either version 2.1 of the License, or (at your option) any later version. Csound is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more details. You should have received a copy of the GNU Lesser General Public License along with Csound and CsoundAC; if not, write to the Free Software Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.","title":"Copyright Notice"},{"location":"intro-historic-preface/","text":"Historical Preface by Berry Vercoe (1996) Realizing music by digital computer involves synthesizing audio signals with discrete points or samples representative of continuous waveforms. There are many ways to do this, each affording a different manner of control. Direct synthesis generates waveforms by sampling a stored function representing a single cycle; additive synthesis generates the many partials of a complex tone, each with its own loudness envelope; subtractive synthesis begins with a complex tone and filters it. Non-linear synthesis uses frequency modulation and waveshaping to give simple signals complex characteristics, while sampling and storage of a natural sound allows it to be used at will. Since comprehensive moment-by-moment specification of sound can be tedious, control is gained in two ways: 1) from the instruments in an orchestra, and 2) from the events within a score. An orchestra is really a computer program that can produce sound, while a score is a body of data which that program can react to. Whether a rise-time characteristic is a fixed constant in an instrument, or a variable of each note in the score, depends on how the user wants to control it. The instruments in a Csound orchestra (see Syntax of the Orchestra) are defined in a simple syntax that invokes complex audio processing routines. A score (see The Standard Numeric Score) passed to this orchestra contains numerically coded pitch and control information, in standard numeric score format. Although many users are content with this format, higher level score processing languages are often convenient. The programs making up the Csound system have a long history of development, beginning with the Music 4 program written at Bell Telephone Laboratories in the early 1960's by Max Mathews. That initiated the stored table concept and much of the terminology that has since enabled computer music researchers to communicate. Valuable additions were made at Princeton by the late Godfrey Winham in Music 4B; my own Music 360 (1968) was very indebted to his work. With Music 11 (1973) I took a different tack: the two distinct networks of control and audio signal processing stemmed from my intensive involvement in the preceding years in hardware synthesizer concepts and design. This division has been retained in Csound. Because it is written entirely in C, Csound is easily installed on any machine running Unix or C. At MIT it runs on VAX/DECstations under Ultrix 4.2, on SUNs under OS 4.1, SGI's under 5.0, on IBM PC's under DOS 6.2 and Windows 3.1, and on the Apple Macintosh under ThinkC 5.0. With this single language for defining the audio signal processing, and portable audio formats like AIFF and WAV, users can move easily from machine to machine. The 1991 version added phase vocoder, FOF, and spectral data types. 1992 saw MIDI converter and control units, enabling Csound to be run from MIDI score-files and external keyboards. In 1994 the sound analysis programs (lpc, pvoc) were integrated into the main load module, enabling all Csound processing to be run from a single executable, and Cscore could pass scores directly to the orchestra for iterative performance. The 1995 release introduced an expanded MIDI set with MIDI-based linseg, butterworth filters, granular synthesis, and an improved spectral-based pitch tracker. Of special importance was the addition of run-time event generating tools (Cscore and MIDI) allowing run-time sensing and response setups that enable interactive composition and experiment. It appeared that real-time software synthesis was now showing some real promise.","title":"Historical Preface"},{"location":"intro-historic-preface/#historical-preface-by-berry-vercoe-1996","text":"Realizing music by digital computer involves synthesizing audio signals with discrete points or samples representative of continuous waveforms. There are many ways to do this, each affording a different manner of control. Direct synthesis generates waveforms by sampling a stored function representing a single cycle; additive synthesis generates the many partials of a complex tone, each with its own loudness envelope; subtractive synthesis begins with a complex tone and filters it. Non-linear synthesis uses frequency modulation and waveshaping to give simple signals complex characteristics, while sampling and storage of a natural sound allows it to be used at will. Since comprehensive moment-by-moment specification of sound can be tedious, control is gained in two ways: 1) from the instruments in an orchestra, and 2) from the events within a score. An orchestra is really a computer program that can produce sound, while a score is a body of data which that program can react to. Whether a rise-time characteristic is a fixed constant in an instrument, or a variable of each note in the score, depends on how the user wants to control it. The instruments in a Csound orchestra (see Syntax of the Orchestra) are defined in a simple syntax that invokes complex audio processing routines. A score (see The Standard Numeric Score) passed to this orchestra contains numerically coded pitch and control information, in standard numeric score format. Although many users are content with this format, higher level score processing languages are often convenient. The programs making up the Csound system have a long history of development, beginning with the Music 4 program written at Bell Telephone Laboratories in the early 1960's by Max Mathews. That initiated the stored table concept and much of the terminology that has since enabled computer music researchers to communicate. Valuable additions were made at Princeton by the late Godfrey Winham in Music 4B; my own Music 360 (1968) was very indebted to his work. With Music 11 (1973) I took a different tack: the two distinct networks of control and audio signal processing stemmed from my intensive involvement in the preceding years in hardware synthesizer concepts and design. This division has been retained in Csound. Because it is written entirely in C, Csound is easily installed on any machine running Unix or C. At MIT it runs on VAX/DECstations under Ultrix 4.2, on SUNs under OS 4.1, SGI's under 5.0, on IBM PC's under DOS 6.2 and Windows 3.1, and on the Apple Macintosh under ThinkC 5.0. With this single language for defining the audio signal processing, and portable audio formats like AIFF and WAV, users can move easily from machine to machine. The 1991 version added phase vocoder, FOF, and spectral data types. 1992 saw MIDI converter and control units, enabling Csound to be run from MIDI score-files and external keyboards. In 1994 the sound analysis programs (lpc, pvoc) were integrated into the main load module, enabling all Csound processing to be run from a single executable, and Cscore could pass scores directly to the orchestra for iterative performance. The 1995 release introduced an expanded MIDI set with MIDI-based linseg, butterworth filters, granular synthesis, and an improved spectral-based pitch tracker. Of special importance was the addition of run-time event generating tools (Cscore and MIDI) allowing run-time sensing and response setups that enable interactive composition and experiment. It appeared that real-time software synthesis was now showing some real promise.","title":"Historical Preface by Berry Vercoe (1996)"},{"location":"intro-history-of-the-manual/","text":"History of the Canonical Csound Reference Manual This initial version of this manual for early versions of Csound was started at MIT by Barry L. Vercoe and maintained there during the 1980's and start of the 1990's. Some of the manual comes from documents for programs like Music11 from the 1970's. This original manual was improved and worked on by Richard Boulanger, John ffitch, Jean Pich\u00e9 and Rasmus Ekman. This manual led to the Official Csound Reference Manual, still located at: http://www.lakewoodsound.com/csound, for Csound version 4.16, November, 1999, which was maintained by David M. Boothe. A parallel version of the manual called the Alternative Csound Reference Manual, was developed by Kevin Conder using DocBook/SGML. This version later became the Canonical version. When Csound was licenced as LGPL by MIT in 2003, the manual was licenced GFDL and placed on Sourceforge along with the sources of Csound. In the winter of 2004, the Canonical Manual was converted to DocBook/XML by Steven Yi to allow for more people to be able to compile and maintain the manual. The manual is currently maintained by Fran\u00e7ois Pinot, Menno Knevel and Stefano Cucchi with continuous contributions from the Csound Community. The French version of the manual is maintained by Fran\u00e7ois Pinot. The manual continues to be a community run project that depends on the contributions of developers and users to help refine the coverage and accuracy of its contents. All contributions are welcome and appreciated. Table 1. Other Contributors Mike Berry Ricard Boulanger David M. Booth Oeyvind Brandtsegg Eli Breder Andr\u00e9as Cabrera Michael Casey Michael Clark Kevin Conder Perry Cook Sean Costello Stefano Cucchi Richard Dobson Mark Dolson Gareth Edwards Rasmus Ekman Dan Ellis Tom Erbe John ffitch Bill Gardner Michael Gogins Joachim Heintz Matt Ingalls Richard Karpen Menno Knevel Anthony Kozar Victor Lazzarini Allan Lee David Macintyre Gabriel Maldonado Max Mathews Hans Mikelson Peter Neub\u00e4cker Peter Nix Peter Nix Jean Pich\u00e9 Fran\u00e7ois Pinot Ville Pulkki Maurizio Umberto Puxeddu John Ramsdell Marc Resibois Felipe Sateler Rob Shaw Paris Smaragdis Greg Sullivan Istvan Varga Bill Verplank Kevi Welsh Robin Whittle Steven Yi And many others. This list is by no means complete. More information can be gathered from the Changelog file in the manual's sources repository.","title":"History of the Manual"},{"location":"intro-history-of-the-manual/#history-of-the-canonical-csound-reference-manual","text":"This initial version of this manual for early versions of Csound was started at MIT by Barry L. Vercoe and maintained there during the 1980's and start of the 1990's. Some of the manual comes from documents for programs like Music11 from the 1970's. This original manual was improved and worked on by Richard Boulanger, John ffitch, Jean Pich\u00e9 and Rasmus Ekman. This manual led to the Official Csound Reference Manual, still located at: http://www.lakewoodsound.com/csound, for Csound version 4.16, November, 1999, which was maintained by David M. Boothe. A parallel version of the manual called the Alternative Csound Reference Manual, was developed by Kevin Conder using DocBook/SGML. This version later became the Canonical version. When Csound was licenced as LGPL by MIT in 2003, the manual was licenced GFDL and placed on Sourceforge along with the sources of Csound. In the winter of 2004, the Canonical Manual was converted to DocBook/XML by Steven Yi to allow for more people to be able to compile and maintain the manual. The manual is currently maintained by Fran\u00e7ois Pinot, Menno Knevel and Stefano Cucchi with continuous contributions from the Csound Community. The French version of the manual is maintained by Fran\u00e7ois Pinot. The manual continues to be a community run project that depends on the contributions of developers and users to help refine the coverage and accuracy of its contents. All contributions are welcome and appreciated. Table 1. Other Contributors Mike Berry Ricard Boulanger David M. Booth Oeyvind Brandtsegg Eli Breder Andr\u00e9as Cabrera Michael Casey Michael Clark Kevin Conder Perry Cook Sean Costello Stefano Cucchi Richard Dobson Mark Dolson Gareth Edwards Rasmus Ekman Dan Ellis Tom Erbe John ffitch Bill Gardner Michael Gogins Joachim Heintz Matt Ingalls Richard Karpen Menno Knevel Anthony Kozar Victor Lazzarini Allan Lee David Macintyre Gabriel Maldonado Max Mathews Hans Mikelson Peter Neub\u00e4cker Peter Nix Peter Nix Jean Pich\u00e9 Fran\u00e7ois Pinot Ville Pulkki Maurizio Umberto Puxeddu John Ramsdell Marc Resibois Felipe Sateler Rob Shaw Paris Smaragdis Greg Sullivan Istvan Varga Bill Verplank Kevi Welsh Robin Whittle Steven Yi And many others. This list is by no means complete. More information can be gathered from the Changelog file in the manual's sources repository.","title":"History of the Canonical Csound Reference Manual"},{"location":"intro-whats-new-in-csound-7/","text":"What's new in Csound 7 to be written ...","title":"What's New in Csound 7"},{"location":"intro-whats-new-in-csound-7/#whats-new-in-csound-7","text":"to be written ...","title":"What's new in Csound 7"},{"location":"invoke-cs-options-alphabetically/","text":"Csound options (flags) alphabetically","title":"Csound Options (flags) Alphabetically"},{"location":"invoke-cs-options-alphabetically/#csound-options-flags-alphabetically","text":"","title":"Csound options (flags) alphabetically"},{"location":"invoke-cs-options-by-category/","text":"Csound options (flags) by category","title":"Csound Options (flags) by Category"},{"location":"invoke-cs-options-by-category/#csound-options-flags-by-category","text":"","title":"Csound options (flags) by category"},{"location":"invoke-environment-variables/","text":"Environment variables","title":"Environment Variables"},{"location":"invoke-environment-variables/#environment-variables","text":"","title":"Environment variables"},{"location":"invoke-how-csound-works/","text":"How Csound works Csound processes and generates output using \"unit generators\" (ugens) called opcodes. These opcodes are used to define instruments in the orchestra. When you run Csound, the engine loads the base Opcodes, and the opcodes contained in separate loadable \"opcode libraries\" . It then interprets the orchestra (through the orchestra reader). The engine sets up an instrument processing chain, which then receives events from the score or in real-time. The processing chain uses the input/output modules to generate output. There are modules that can write to file, or generate real-time audio output. Csound's processing buffers Csound processes audio in sample blocks called buffers. There are three separate buffer layers: spout = Csound's innermost software buffer, contains ksmps sample frames. Csound processes real-time control events once every ksmps sample frames. -b = Csound's intermediate software buffer (the \"software\" buffer), in sample frames. Should be (but does not need to be) an integral multiple of ksmps (can equal ksmps too). Once per ksmps sample frames, Csound copies spout to the -b buffer. Once per -b sample frames, Csound copies the -b buffer to the -B \"hardware\" buffer. -B = The sound card's internal buffer (the \"hardware\" buffer), in sample frames. Should be (and may need to be) an integral multiple of -b. If Csound misses delivering a -b one time, the extra -b sample frames in -b are still there for the sound card to keep playing while Csound catches up. But they can be the same size if you're willing to bet Csound can always keep up with the sound card.","title":"How Csound Works"},{"location":"invoke-how-csound-works/#how-csound-works","text":"Csound processes and generates output using \"unit generators\" (ugens) called opcodes. These opcodes are used to define instruments in the orchestra. When you run Csound, the engine loads the base Opcodes, and the opcodes contained in separate loadable \"opcode libraries\" . It then interprets the orchestra (through the orchestra reader). The engine sets up an instrument processing chain, which then receives events from the score or in real-time. The processing chain uses the input/output modules to generate output. There are modules that can write to file, or generate real-time audio output.","title":"How Csound works"},{"location":"invoke-how-csound-works/#csounds-processing-buffers","text":"Csound processes audio in sample blocks called buffers. There are three separate buffer layers: spout = Csound's innermost software buffer, contains ksmps sample frames. Csound processes real-time control events once every ksmps sample frames. -b = Csound's intermediate software buffer (the \"software\" buffer), in sample frames. Should be (but does not need to be) an integral multiple of ksmps (can equal ksmps too). Once per ksmps sample frames, Csound copies spout to the -b buffer. Once per -b sample frames, Csound copies the -b buffer to the -B \"hardware\" buffer. -B = The sound card's internal buffer (the \"hardware\" buffer), in sample frames. Should be (and may need to be) an integral multiple of -b. If Csound misses delivering a -b one time, the extra -b sample frames in -b are still there for the sound card to keep playing while Csound catches up. But they can be the same size if you're willing to bet Csound can always keep up with the sound card.","title":"Csound's processing buffers"},{"location":"invoke-order-of-precedence/","text":"Order of precedence","title":"Order of Precedence"},{"location":"invoke-order-of-precedence/#order-of-precedence","text":"","title":"Order of precedence"},{"location":"invoke-the-csd-file-format/","text":"The .csd file format The Unified File Format, introduced in Csound version 3.50, enables the orchestra and score files, as well as command line flags, to be combined in one file. The file has the extension .csd. This format was originally introduced by Michael Gogins in AXCsound. The file is a structured data file which uses markup language, similar to any SGML such as HTML. Start tags ( ) and end tags ( ) are used to delimit the various elements. The file is saved as a text file. Mandatory Elements Enclosing tag (<CsoundSynthesizer>) The first tag in the file must be the start tag . The last tag in the file must be the end tag . This element is used to alert the csound compiler to the .csd format. All text before the start tag and after the end tag is ignored by Csound. The tag may also be spelled . Options (<CsOptions>) Csound command line flags are put in the Options Element. This section is delimited by the start tag and the end tag Lines beginning with # or ; are treated as comments. Orchestra ( ) The instrument definitions (orchestra) are put into the Instruments Element. The statements and syntax in this section are identical to the Csound orchestra file, and have the same requirements, including the header statements (sr, kr, etc.) This Instruments Element is delimited with the start tag and the end tag . Score (<CsScore>) Csound score statements are put in the Score Element. The statements and syntax in this section are identical to the Csound score file, and have the same requirements. The Score Element is delimited by the start tag and the end tag . As an alternative Csound score statements can also be generated by an external program using the CsScore scheme with an attribute bin. The lines upto the closing tag are copied to a file and the external program named is called with that file name and the destination score file. The external program should create a standard Csound score. Optional Elements Included Base64 Files (<CsFileB>) Base64-encoded files may be included with the tag , where filename is the name of the file to be included. The Base64-encoded data should be terminated with a tag. For encoding files, the csb64enc and makecsd utilities (included with Csound 5.00 and newer) can be used. The file will be extracted to the current directory, and deleted at end of performance. If there is an already existing file with the same name, it is not overwritten, but an error will occur instead. Base64-encoded MIDI files may be included with the tag , where filename is the name of the file containing the MIDI information. There is no matching end tag. This was added in Csound version 4.07. Note: using this tag is not recommended; use instead. Base64-encoded sample files may be included with the tag , where filename is the name of the file containing the sample. There is no matching end tag. This was added in Csound version 4.07. Note: using this tag is not recommended; use instead. Included Unencoded Files (<CsFile>) Unencoded files may be included with the tag , where filename is the name of the file to be included. The data should be terminated with a tag alone on a line. The file will be extracted to the current directory, and deleted at end of performance. If there is an already existing file with the same name, it is not overwritten, but an error will occur instead. Version Blocking (<CsVersion>) Versions of Csound may blocked by placing one of the following statements between the start tag and the end tag : Before #.# or After #.# where #.# is the requested Csound version number. The second statement may be written simply as: . This was added in Csound version 4.09. Licence Information (<CsLicence> or <CsLicense>) Licencing details can be included in between the start tag and the end tag . There is no format for this information, any text is acceptable. This text will be printed by Csound to the console when the CSD is run. Licence Information (<CsShortLicence> or <CsShortLicense>) From version 6.05 licencing details can be also included in between the start tag and the end tag . This offers seven well-known licences, coded as as an integer. 0: \"All rights reserved\" (default) 1: \"Creative Commons Attribution-NonCommercial-NoDerivatives (CC BY-NC-ND)\" 2: \"Creative Commons Attribution-NonCommercial-ShareAlike (CC BY-NC-SA)\" 3: \"Creative Commons Attribution-NonCommercial (CC BY-NC)\" 4: \"Creative Commons Attribution-NoDerivatives (CC BY-ND)\" 5: \"Creative Commons Attribution-ShareAlike (CC BY-SA)\" 6: \"Creative Commons Attribution-ShareAlike (CC BY)\" 7: \"Licenced under BSD\" Embedded HTML (<html>) Any valid HTML code can be embedded in the CSD file. This code should be structured exactly like an ordinary Web page. This code can contain any valid HTML, JavaScript, Cascading Style Sheet, WebGL, etc., etc. code. In some Csound front ends and programming environments, including at least CsoundQt or Csound for Android, this page will be parsed, executed, and displayed by a Web browser embedded in the environment. JavaScript code in this page will have access to a global csound object that implements the following functions, which are a selected subset of the Csound API. The names, data types, and uses of these functions are exactly the same as detailed in the Csound API Reference Manual. [int] getVersion (); compileOrc (orchestra_text); [double] evalCode (orchestra_expression); readScore (score_text); setControlChannel (channel_name, numeric_value); [double] getControlChannel (channel_name); message (message_string); [int] getSr (); [int] getKsmps (); [int] getNchnls (); // Not a part of the Csound API -- called by the environment to detect whether Csound is running. [int] isPlaying (); The HTML element of the CSD file can be used to create custom user interfaces for the piece, to generate score events and even orchestra code using JavaSscript, to store presets for widgets, and for many other purposes. The GameOfLife3D.csd and LindenmayerCanvas.csd examples demonstrate these uses (tested in CsoundQt; running these examples requires additional resources found in the Csound examples directory in GIT).","title":"The `.csd` File Format"},{"location":"invoke-the-csd-file-format/#the-csdfile-format","text":"The Unified File Format, introduced in Csound version 3.50, enables the orchestra and score files, as well as command line flags, to be combined in one file. The file has the extension .csd. This format was originally introduced by Michael Gogins in AXCsound. The file is a structured data file which uses markup language, similar to any SGML such as HTML. Start tags ( ) and end tags ( ) are used to delimit the various elements. The file is saved as a text file.","title":"The .csdfile format"},{"location":"invoke-the-csd-file-format/#mandatory-elements","text":"","title":"Mandatory Elements"},{"location":"invoke-the-csd-file-format/#enclosing-tag-csoundsynthesizer","text":"The first tag in the file must be the start tag . The last tag in the file must be the end tag . This element is used to alert the csound compiler to the .csd format. All text before the start tag and after the end tag is ignored by Csound. The tag may also be spelled .","title":"Enclosing tag (&lt;CsoundSynthesizer>)"},{"location":"invoke-the-csd-file-format/#options-csoptions","text":"Csound command line flags are put in the Options Element. This section is delimited by the start tag and the end tag Lines beginning with # or ; are treated as comments. Orchestra ( ) The instrument definitions (orchestra) are put into the Instruments Element. The statements and syntax in this section are identical to the Csound orchestra file, and have the same requirements, including the header statements (sr, kr, etc.) This Instruments Element is delimited with the start tag and the end tag .","title":"Options (&lt;CsOptions>)"},{"location":"invoke-the-csd-file-format/#score-csscore","text":"Csound score statements are put in the Score Element. The statements and syntax in this section are identical to the Csound score file, and have the same requirements. The Score Element is delimited by the start tag and the end tag . As an alternative Csound score statements can also be generated by an external program using the CsScore scheme with an attribute bin. The lines upto the closing tag are copied to a file and the external program named is called with that file name and the destination score file. The external program should create a standard Csound score.","title":"Score (&lt;CsScore>)"},{"location":"invoke-the-csd-file-format/#optional-elements","text":"","title":"Optional Elements"},{"location":"invoke-the-csd-file-format/#included-base64-files-csfileb","text":"Base64-encoded files may be included with the tag , where filename is the name of the file to be included. The Base64-encoded data should be terminated with a tag. For encoding files, the csb64enc and makecsd utilities (included with Csound 5.00 and newer) can be used. The file will be extracted to the current directory, and deleted at end of performance. If there is an already existing file with the same name, it is not overwritten, but an error will occur instead. Base64-encoded MIDI files may be included with the tag , where filename is the name of the file containing the MIDI information. There is no matching end tag. This was added in Csound version 4.07. Note: using this tag is not recommended; use instead. Base64-encoded sample files may be included with the tag , where filename is the name of the file containing the sample. There is no matching end tag. This was added in Csound version 4.07. Note: using this tag is not recommended; use instead.","title":"Included Base64 Files (&lt;CsFileB>)"},{"location":"invoke-the-csd-file-format/#included-unencoded-files-csfile","text":"Unencoded files may be included with the tag , where filename is the name of the file to be included. The data should be terminated with a tag alone on a line. The file will be extracted to the current directory, and deleted at end of performance. If there is an already existing file with the same name, it is not overwritten, but an error will occur instead.","title":"Included Unencoded Files (&lt;CsFile>)"},{"location":"invoke-the-csd-file-format/#version-blocking-csversion","text":"Versions of Csound may blocked by placing one of the following statements between the start tag and the end tag : Before #.# or After #.# where #.# is the requested Csound version number. The second statement may be written simply as:","title":"Version Blocking (&lt;CsVersion>)"},{"location":"invoke-the-csd-file-format/#_1","text":"This was added in Csound version 4.09.","title":"."},{"location":"invoke-the-csd-file-format/#licence-information-cslicence-or-cslicense","text":"Licencing details can be included in between the start tag and the end tag . There is no format for this information, any text is acceptable. This text will be printed by Csound to the console when the CSD is run.","title":"Licence Information (&lt;CsLicence> or &lt;CsLicense>)"},{"location":"invoke-the-csd-file-format/#licence-information-csshortlicence-or-csshortlicense","text":"From version 6.05 licencing details can be also included in between the start tag and the end tag . This offers seven well-known licences, coded as as an integer. 0: \"All rights reserved\" (default) 1: \"Creative Commons Attribution-NonCommercial-NoDerivatives (CC BY-NC-ND)\" 2: \"Creative Commons Attribution-NonCommercial-ShareAlike (CC BY-NC-SA)\" 3: \"Creative Commons Attribution-NonCommercial (CC BY-NC)\" 4: \"Creative Commons Attribution-NoDerivatives (CC BY-ND)\" 5: \"Creative Commons Attribution-ShareAlike (CC BY-SA)\" 6: \"Creative Commons Attribution-ShareAlike (CC BY)\" 7: \"Licenced under BSD\"","title":"Licence Information (&lt;CsShortLicence> or &lt;CsShortLicense>)"},{"location":"invoke-the-csd-file-format/#embedded-html-html","text":"Any valid HTML code can be embedded in the CSD file. This code should be structured exactly like an ordinary Web page. This code can contain any valid HTML, JavaScript, Cascading Style Sheet, WebGL, etc., etc. code. In some Csound front ends and programming environments, including at least CsoundQt or Csound for Android, this page will be parsed, executed, and displayed by a Web browser embedded in the environment. JavaScript code in this page will have access to a global csound object that implements the following functions, which are a selected subset of the Csound API. The names, data types, and uses of these functions are exactly the same as detailed in the Csound API Reference Manual. [int] getVersion (); compileOrc (orchestra_text); [double] evalCode (orchestra_expression); readScore (score_text); setControlChannel (channel_name, numeric_value); [double] getControlChannel (channel_name); message (message_string); [int] getSr (); [int] getKsmps (); [int] getNchnls (); // Not a part of the Csound API -- called by the environment to detect whether Csound is running. [int] isPlaying (); The HTML element of the CSD file can be used to create custom user interfaces for the piece, to generate score events and even orchestra code using JavaSscript, to store presets for widgets, and for many other purposes. The GameOfLife3D.csd and LindenmayerCanvas.csd examples demonstrate these uses (tested in CsoundQt; running these examples requires additional resources found in the Csound examples directory in GIT).","title":"Embedded HTML (&lt;html>)"},{"location":"invoke-the-csound-command/","text":"The csound command","title":"The `csound` Command"},{"location":"invoke-the-csound-command/#the-csoundcommand","text":"","title":"The csoundcommand"},{"location":"orc-data-types/","text":"Data types","title":"Data Types"},{"location":"orc-data-types/#data-types","text":"","title":"Data types"},{"location":"orc-global-space/","text":"Global space","title":"Global Space"},{"location":"orc-global-space/#global-space","text":"","title":"Global space"},{"location":"orc-header-statements/","text":"Header statements","title":"Header Statements"},{"location":"orc-header-statements/#header-statements","text":"","title":"Header statements"},{"location":"orc-instruments/","text":"Instruments","title":"Instruments"},{"location":"orc-instruments/#instruments","text":"","title":"Instruments"},{"location":"orc-macros/","text":"Macros","title":"Macros"},{"location":"orc-macros/#macros","text":"","title":"Macros"},{"location":"orc-traditional-functional-code/","text":"Traditional and functional code","title":"Traditional and Functional Code"},{"location":"orc-traditional-functional-code/#traditional-and-functional-code","text":"","title":"Traditional and functional code"},{"location":"orc-user-defined-opcodes/","text":"User Defined Opcodes (UDO)","title":"User Defined Opcodes (UDO)"},{"location":"orc-user-defined-opcodes/#user-defined-opcodes-udo","text":"","title":"User Defined Opcodes (UDO)"},{"location":"orc-variables/","text":"Variables","title":"Variables"},{"location":"orc-variables/#variables","text":"","title":"Variables"},{"location":"sco-expressions/","text":"Expressions","title":"Expressions"},{"location":"sco-expressions/#expressions","text":"","title":"Expressions"},{"location":"sco-included-files/","text":"Included files","title":"Included Files"},{"location":"sco-included-files/#included-files","text":"","title":"Included files"},{"location":"sco-macros/","text":"Macros","title":"Macros"},{"location":"sco-macros/#macros","text":"","title":"Macros"},{"location":"sco-parameter-fields/","text":"Parameter fields","title":"Parameter Fields"},{"location":"sco-parameter-fields/#parameter-fields","text":"","title":"Parameter fields"},{"location":"sco-preprocessing/","text":"Preprocessing","title":"Preprocessing"},{"location":"sco-preprocessing/#preprocessing","text":"","title":"Preprocessing"},{"location":"sco-statements/","text":"Statements","title":"Statements"},{"location":"sco-statements/#statements","text":"","title":"Statements"}]}